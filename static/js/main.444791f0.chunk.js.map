{"version":3,"sources":["componenets/App.module.css","componenets/Balance/Balance.module.css","componenets/TransactionHistory/TransactionHistory.module.css","componenets/Dashboard/Dashboard.module.css","services/transaction-type.js","componenets/Controls/Controls.js","componenets/Balance/Balance.js","componenets/TransactionHistory/TransactionHistory.js","componenets/Dashboard/Dashboard.js","componenets/App.js","index.js","componenets/Controls/Controls.module.css"],"names":["module","exports","TransactionType","DEPOSIT","WITHDRAW","Controls","state","inputValue","handleButtonClick","e","handleTransactionAdd","props","type","target","name","amount","setState","handleInput","Number","parseFloat","value","this","className","styles","controls","input","onChange","button","onClick","Component","Balance","depositAmount","withdrawAmount","balance","role","aria-label","toLocaleString","minimumFractionDigits","TransactionHistory","transactions","transactionHistory","map","tr","key","id","date","defaultProps","INITIAL_STATE","Dashboard","addTransaction","inputTransaction","toast","warn","autoClose","error","uuidv4","Date","localStorage","hasOwnProperty","JSON","parse","getItem","reduce","total","setItem","stringify","transactionType","filter","dashboard","totalize","App","containerApp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.444791f0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"containerApp\":\"App_containerApp__10oCJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"balance\":\"Balance_balance__2hy9A\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"transactionHistory\":\"TransactionHistory_transactionHistory__LA57M\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dashboard\":\"Dashboard_dashboard__3LD2B\"};","const TransactionType = {\n  DEPOSIT: 'Deposit',\n  WITHDRAW: 'Withdrawal',\n};\n\nexport default TransactionType;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport TransactionType from '../../services/transaction-type';\n\nimport styles from './Controls.module.css';\n\nexport default class Controls extends Component {\n  state = {\n    inputValue: '',\n  };\n\n  handleButtonClick = e => {\n    const { handleTransactionAdd } = this.props;\n    const type = e.target.name;\n    const amount = this.state.inputValue;\n\n    this.setState({ inputValue: '' });\n\n    handleTransactionAdd({ type, amount });\n  };\n\n  handleInput = e => {\n    this.setState({ inputValue: Number.parseFloat(e.target.value) });\n  };\n\n  render() {\n    const { inputValue } = this.state;\n    return (\n      <section className={styles.controls}>\n        <input\n          type=\"number\"\n          className={styles.input}\n          onChange={this.handleInput}\n          value={inputValue}\n        />\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={this.handleButtonClick}\n          name={TransactionType.DEPOSIT}\n        >\n          Deposit\n        </button>\n        <button\n          type=\"button\"\n          className={styles.button}\n          onClick={this.handleButtonClick}\n          name={TransactionType.WITHDRAW}\n        >\n          Withdraw\n        </button>\n      </section>\n    );\n  }\n}\n\nControls.propTypes = { handleTransactionAdd: PropTypes.func.isRequired };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Balance.module.css';\n\nfunction Balance({ depositAmount, withdrawAmount, balance }) {\n  return (\n    <section className={styles.balance}>\n      <span role=\"img\" aria-label=\"upArrow\">\n        ⬆️\n        {depositAmount.toLocaleString('us-EN', {\n          minimumFractionDigits: 2,\n        })}\n        $\n      </span>\n      <span role=\"img\" aria-label=\"downArrow\">\n        ⬇️\n        {withdrawAmount.toLocaleString('us-EN', {\n          minimumFractionDigits: 2,\n        })}\n        $\n      </span>\n      <span>\n        Balance:{' '}\n        {balance.toLocaleString('us-EN', {\n          minimumFractionDigits: 2,\n        })}\n        $\n      </span>\n    </section>\n  );\n}\n\nBalance.propTypes = {\n  depositAmount: PropTypes.number.isRequired,\n  withdrawAmount: PropTypes.number.isRequired,\n  balance: PropTypes.number.isRequired,\n};\n\nexport default Balance;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './TransactionHistory.module.css';\n\nimport TransactionType from '../../services/transaction-type';\n\nfunction TransactionHistory({ transactions }) {\n  return (\n    <table className={styles.transactionHistory}>\n      <thead>\n        <tr>\n          <th>Transaction</th>\n          <th>Amount</th>\n          <th>Date</th>\n        </tr>\n      </thead>\n      <tbody>\n        {transactions.map(tr => (\n          <tr key={tr.id}>\n            <td>{tr.type}</td>\n            <td>\n              {tr.amount.toLocaleString('us-EN', {\n                minimumFractionDigits: 2,\n              })}\n              $\n            </td>\n            <td>{tr.date}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nTransactionHistory.defaultProps = {\n  transactions: [],\n};\n\nTransactionHistory.propTypes = {\n  transactions: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      type: PropTypes.oneOf([\n        TransactionType.DEPOSIT,\n        TransactionType.WITHDRAW,\n      ]),\n      amount: PropTypes.number.isRequired,\n      date: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default TransactionHistory;\n","import React, { Component } from 'react';\nimport uuidv4 from 'uuid';\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport Controls from '../Controls/Controls';\nimport Balance from '../Balance/Balance';\nimport TransactionHistory from '../TransactionHistory/TransactionHistory';\n\nimport styles from './Dashboard.module.css';\n\nimport TransactionType from '../../services/transaction-type';\n\nconst INITIAL_STATE = {\n  transactions: [],\n  balance: 0,\n};\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n\n    if (localStorage.hasOwnProperty('transactions')) {\n      const transactions = JSON.parse(localStorage.getItem('transactions'));\n\n      this.state = {\n        transactions,\n        balance: transactions.reduce(\n          (total, tr) =>\n            total + tr.amount * (tr.type === TransactionType.DEPOSIT ? 1 : -1),\n          0,\n        ),\n      };\n    } else {\n      this.state = {\n        ...INITIAL_STATE,\n      };\n    }\n  }\n\n  componentDidUpdate() {\n    const { transactions } = this.state;\n    localStorage.setItem('transactions', JSON.stringify(transactions));\n  }\n\n  addTransaction = inputTransaction => {\n    const { type, amount } = inputTransaction;\n    const { transactions, balance } = this.state;\n\n    if (amount <= 0) {\n      toast.warn(\n        'Введите корректную сумму для проведения операции (положительное число) !',\n        {\n          autoClose: 7000,\n        },\n      );\n      return;\n    }\n\n    if (amount > balance && type === TransactionType.WITHDRAW) {\n      toast.error('На счету недостаточно средств для проведения операции!', {\n        autoClose: 10000,\n      });\n      return;\n    }\n\n    this.setState({\n      transactions: [\n        ...transactions,\n        {\n          id: uuidv4(),\n          type,\n          amount,\n          date: new Date().toLocaleString(),\n        },\n      ],\n      balance: balance + amount * (type === TransactionType.DEPOSIT ? 1 : -1),\n    });\n  };\n\n  totalize(transactionType) {\n    const { transactions } = this.state;\n\n    return transactions\n      .filter(({ type }) => type === transactionType)\n      .reduce((total, tr) => total + tr.amount, 0);\n  }\n\n  render() {\n    const { transactions, balance } = this.state;\n    return (\n      <div className={styles.dashboard}>\n        <Controls handleTransactionAdd={this.addTransaction} />\n        <Balance\n          depositAmount={this.totalize(TransactionType.DEPOSIT)}\n          withdrawAmount={this.totalize(TransactionType.WITHDRAW)}\n          balance={balance}\n        />\n        <TransactionHistory transactions={transactions} />\n        <ToastContainer />\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport styles from './App.module.css';\n\nimport Dashboard from './Dashboard/Dashboard';\n\nclass App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <div className={styles.containerApp}>\n        <Dashboard />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './componenets/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controls\":\"Controls_controls__3zgyM\",\"input\":\"Controls_input__2Nj9R\",\"button\":\"Controls_button__X63wQ\"};"],"sourceRoot":""}